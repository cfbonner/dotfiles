let mapleader = "\<Space>"

set background=dark
set lazyredraw                  " Don't update while executing macros
set backspace=indent,eol,start  " Sane backspace behavior

:command WQ wq
:command Wq wq
:command W w
:command Q q

nmap <leader>vr :tabnew $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>
" Toggle tabs
nmap <leader>nt :tabnew<cr>
" Toggle for relative line numbers
nmap <leader>rn :set relativenumber<cr>
nmap <leader>nr :set norelativenumber<cr>
nmap <leader>non :set nonumber<cr>
nmap <leader>nn :set number<cr>

" Go to directory of current file
nmap <leader>- :e %:h<cr>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Add buffers to separate dir
set undodir=~/.vim/tmp//,.
set backupdir=~/.vim/tmp//,.
set directory=~/.vim/tmp//,.

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Show search result before pressing enter
" set incsearch

" Disable adding new line to files
set nofixendofline

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>

" vim-tmux-runner
nnoremap <leader>tr :VtrOpenRunner {'orientation': 'h', 'percentage': 50}<cr>
nnoremap <leader>tlr :VtrOpenRunner {'orientation': 'v', 'percentage': 20}<cr>
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<cr>
nnoremap <leader>ar :VtrAttachToPane<cr>
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>dr :VtrDetachRunner<cr>
nnoremap <leader>cr :VtrClearRunner<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <leader>sf :VtrSendFile<cr>
nnoremap <leader>ss :VtrSendLines<cr>

" vim-rspec
map <leader>rt :call RunCurrentSpecFile()<cr>
map <leader>rs :call RunNearestSpec()<cr>
map <leader>rr :call RunLastSpec()<cr>
map <leader>ra :call RunAllSpecs()<cr>
let g:rspec_command = "call VtrSendCommand('bundle exec rspec {spec}')"

" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<cr>

" Ack default behaviour won't open first result by default
cnoreabbrev Ack Ack!
nnoremap <Leader>gg :Ack!<Space>

" Map CTRL-P for FuzzySearch
nmap <C-p> :CtrlP<cr>
" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0

" EDITOR APPEARANCE  ------------------------------------------------- "
:set relativenumber
:highlight lineNr ctermfg=145                    

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" full zoom of window when necessary
nnoremap <leader>z :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" The Silver Searcher ------------------------------------------------ "
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " using ag within ack
  let g:ackprg = 'ag --vimgrep'
endif
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" PLUGINS ------------------------------------------------------------ "
call plug#begin()
  Plug 'editorconfig/editorconfig-vim'
  Plug 'w0rp/ale'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'christoomey/vim-system-copy'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'christoomey/vim-tmux-runner'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-vinegar'
  Plug 'ngmy/vim-rubocop'
  Plug 'mileszs/ack.vim'
  Plug 'thoughtbot/vim-rspec'

  "" language helpers
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'
  Plug 'pangloss/vim-javascript'
  Plug 'yuezk/vim-js'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'elixir-editors/vim-elixir' 
  "" oddball formatters
  Plug 'slim-template/vim-slim'
  Plug 'kchmck/vim-coffee-script'
call plug#end()
" run to install --> :PlugInstall
let g:javascript_plugin_jsdoc = 1
let g:vim_jsx_pretty_colorful_config = 1 " default 0

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\}
" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1 
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1
" Disable ALE auto highlights
let g:ale_set_highlights = 0

syntax enable
filetype plugin indent on

" GENERIC SETTINGS FROM VIMtutor ------------------------------------- "
" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Install VimPlug ---------------------------------------------------- "
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
  set shiftwidth=2
endif

filetype plugin indent on
syntax on

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif
